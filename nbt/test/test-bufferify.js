import test from 'ava';

import * as NBT from '../index.js';
import { TAG_COMPOUND, TAG_END, TAG_INT, TAG_LIST, TAG_LONG, TAG_STRING, TAG_BYTE } from '../low-level.js';


test('Can bufferize an object', t => {
	// Arrange
	const schema = {
		Author: NBT.string,
		Description: NBT.string,
		EnclosingSize: {
			x: NBT.int,
			y: NBT.int,
			z: NBT.int
		},
		Name: NBT.string,
		RegionCount: NBT.int,
		TimeCreated: NBT.long,
		TimeModified: NBT.long,
		TotalBlocks: NBT.int,
		TotalVolume: NBT.int
	};

	const data = {
		Name: 'One block',
		Description: 'This is an important schematic',
		Author: 'AaronAsAChimp',
		EnclosingSize: {
			x: 1,
			y: 1,
			z: 1
		},
		RegionCount: 1,
		TimeCreated: 1731793428085n,
		TimeModified: 1731793428085n,
		TotalBlocks: 1,
		TotalVolume: 1
	};

	// Act
	const buf = NBT.bufferify(data, schema);

	// Assert
	const bytes = new Uint8Array([
		TAG_COMPOUND, 0x00, 0x00,
			TAG_STRING, 0x00, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x00, 0x0D, 0x41, 0x61, 0x72, 0x6F, 0x6E, 0x41, 0x73, 0x41, 0x43, 0x68, 0x69, 0x6D, 0x70,
			TAG_STRING, 0x00, 0x0B, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x1E, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x6E, 0x20, 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x61, 0x6E, 0x74, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6D, 0x61, 0x74, 0x69, 0x63,
			TAG_COMPOUND, 0x00, 0x0D, 0x45, 0x6E, 0x63, 0x6C, 0x6F, 0x73, 0x69, 0x6E, 0x67, 0x53, 0x69, 0x7A, 0x65,
				TAG_INT, 0x00, 0x01, 0x78, 0x00, 0x00, 0x00, 0x01,
				TAG_INT, 0x00, 0x01, 0x79, 0x00, 0x00, 0x00, 0x01,
				TAG_INT, 0x00, 0x01, 0x7A, 0x00, 0x00, 0x00, 0x01,
			TAG_END,
			TAG_STRING, 0x00, 0x04, 0x4E, 0x61, 0x6D, 0x65, 0x00, 0x09, 0x4F, 0x6E, 0x65, 0x20, 0x62, 0x6C, 0x6F, 0x63, 0x6B,
			TAG_INT, 0x00, 0x0B, 0x52, 0x65, 0x67, 0x69, 0x6F, 0x6E, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x00, 0x00, 0x00, 0x01,
			TAG_LONG, 0x00, 0x0B, 0x54, 0x69, 0x6D, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x00, 0x00, 0x01, 0x93, 0x36, 0xEE, 0x9E, 0x75,
			TAG_LONG, 0x00, 0x0C, 0x54, 0x69, 0x6D, 0x65, 0x4D, 0x6F, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x00, 0x00, 0x01, 0x93, 0x36, 0xEE, 0x9E, 0x75,
			TAG_INT, 0x00, 0x0B, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x73, 0x00, 0x00, 0x00, 0x01,
			TAG_INT, 0x00, 0x0B, 0x54, 0x6F, 0x74, 0x61, 0x6C, 0x56, 0x6F, 0x6C, 0x75, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x01,
		TAG_END
	]);

	t.deepEqual(buf, bytes);
});

test('Can bufferize a nested compound object', t => {
	// Arrange
	const schema = {
		A: {
			B: NBT.byte,
		},
	};

	const data = {
		A: {
			B: 1,
		},
	};

	// Act
	const buf = NBT.bufferify(data, schema);

	// Assert
	const bytes = new Uint8Array([
		TAG_COMPOUND, 0x00, 0x00,
			TAG_COMPOUND, 0x00, 0x01, 0x41,
				TAG_BYTE, 0x00, 0x01, 0x42, 0x01,
			TAG_END,
		TAG_END
	]);

	t.deepEqual(buf, bytes);
});


test('Can bufferize a record object', t => {
	// Arrange
	const schema = {
		A: NBT.record(NBT.byte),
	};

	const data = {
		A: {
			One: 1,
			Two: 2,
			Three: 3
		},
	};

	// Act
	const buf = NBT.bufferify(data, schema);

	// Assert
	const bytes = new Uint8Array([
		TAG_COMPOUND, 0x00, 0x00,
			TAG_COMPOUND, 0x00, 0x01, 0x41,
				TAG_BYTE, 0x00, 0x03, 0x4F, 0x6E, 0x65, 0x01,
				TAG_BYTE, 0x00, 0x03, 0x54, 0x77, 0x6F, 0x02,
				TAG_BYTE, 0x00, 0x05, 0x54, 0x68, 0x72, 0x65, 0x65, 0x03,
			TAG_END,
		TAG_END
	]);

	t.deepEqual(buf, bytes);
});

test('Can bufferize a list of compound objects', t => {
	// Arrange
	const schema = {
		A: [
			{
				K: NBT.string,
				V: NBT.string
			}
		],
	};

	const data = {
		A: [
			{
				K: 'a',
				V: 'b'
			}
		],
	};

	// Act
	const buf = NBT.bufferify(data, schema);

	// Assert
	const bytes = new Uint8Array([
		TAG_COMPOUND, 0x00, 0x00,
			TAG_LIST, 0x00, 0x01, 0x41, TAG_COMPOUND, 0x00, 0x00, 0x00, 0x01,
				TAG_STRING, 0x00, 0x01, 0x4B, 0x00, 0x01, 0x61,
				TAG_STRING, 0x00, 0x01, 0x56, 0x00, 0x01, 0x62,
			TAG_END,
		TAG_END
	]);

	t.deepEqual(buf, bytes);
});
